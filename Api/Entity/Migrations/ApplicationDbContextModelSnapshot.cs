// <auto-generated />
using System;
using Entity.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Entity.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entity.Models.Operational.BlackList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Asset")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RestrictionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("BlackList");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Asset = true,
                            IsDeleted = false,
                            Reason = "Infracción grave",
                            RestrictionDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            VehicleId = 3
                        });
                });

            modelBuilder.Entity("Entity.Models.Operational.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Asset")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParkingId")
                        .HasColumnType("integer");

                    b.Property<int?>("RelatedEntityId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParkingId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Entity.Models.Operational.RegisteredVehicles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Asset")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExitDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("SlotsId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SlotsId");

                    b.HasIndex("VehicleId");

                    b.ToTable("RegisteredVehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Asset = true,
                            EntryDate = new DateTime(2025, 1, 1, 8, 0, 0, 0, DateTimeKind.Utc),
                            ExitDate = new DateTime(2025, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            SlotsId = 1,
                            Status = "Out",
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 2,
                            Asset = true,
                            EntryDate = new DateTime(2025, 1, 1, 9, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            SlotsId = 3,
                            Status = "In",
                            VehicleId = 2
                        });
                });

            modelBuilder.Entity("Entity.Models.Operational.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Asset")
                        .HasColumnType("boolean");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TypeVehicleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("TypeVehicleId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Asset = true,
                            ClientId = 1,
                            Color = "Rojo",
                            IsDeleted = false,
                            Plate = "ABC123",
                            TypeVehicleId = 1
                        },
                        new
                        {
                            Id = 2,
                            Asset = true,
                            ClientId = 1,
                            Color = "Negro",
                            IsDeleted = false,
                            Plate = "XYZ987",
                            TypeVehicleId = 2
                        },
                        new
                        {
                            Id = 3,
                            Asset = true,
                            ClientId = 2,
                            Color = "Blanco",
                            IsDeleted = false,
                            Plate = "TRK456",
                            TypeVehicleId = 3
                        });
                });

            modelBuilder.Entity("Entity.Models.Parameter.Camera", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Asset")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("ParkingId")
                        .HasColumnType("integer");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParkingId");

                    b.ToTable("Cameras");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Asset = true,
                            IsDeleted = false,
                            Name = "Cam 1",
                            ParkingId = 1,
                            Resolution = "1080p",
                            Url = "http://cam1"
                        },
                        new
                        {
                            Id = 2,
                            Asset = true,
                            IsDeleted = false,
                            Name = "Cam VIP",
                            ParkingId = 2,
                            Resolution = "4K",
                            Url = "http://cam-vip"
                        });
                });

            modelBuilder.Entity("Entity.Models.Parameter.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Asset")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Asset = true,
                            IsDeleted = false,
                            Name = "Cliente Demo",
                            PersonId = 1
                        },
                        new
                        {
                            Id = 2,
                            Asset = true,
                            IsDeleted = false,
                            Name = "Cliente Premium",
                            PersonId = 2
                        },
                        new
                        {
                            Id = 3,
                            Asset = true,
                            IsDeleted = false,
                            Name = "Consumidor Final",
                            PersonId = 3
                        });
                });

            modelBuilder.Entity("Entity.Models.Parameter.MemberShipType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Asset")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DurationDaysBase")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("PriceBase")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.ToTable("MemberShipTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Asset = true,
                            Description = "Membresía mensual",
                            DurationDaysBase = 30,
                            IsDeleted = false,
                            Name = "Mensual",
                            PriceBase = 50m
                        },
                        new
                        {
                            Id = 2,
                            Asset = true,
                            Description = "Membresía anual",
                            DurationDaysBase = 365,
                            IsDeleted = false,
                            Name = "Anual",
                            PriceBase = 500m
                        });
                });

            modelBuilder.Entity("Entity.Models.Parameter.Memberships", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Asset")
                        .HasColumnType("boolean");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<int>("DurationDays")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MembershipTypeId")
                        .HasColumnType("integer");

                    b.Property<decimal>("PriceAtPurchase")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MembershipTypeId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Memberships");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Asset = true,
                            Currency = "USD",
                            DurationDays = 30,
                            EndDate = new DateTime(2025, 1, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            MembershipTypeId = 1,
                            PriceAtPurchase = 50m,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 2,
                            Asset = true,
                            Currency = "USD",
                            DurationDays = 365,
                            EndDate = new DateTime(2026, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            MembershipTypeId = 2,
                            PriceAtPurchase = 500m,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            VehicleId = 2
                        });
                });

            modelBuilder.Entity("Entity.Models.Parameter.Parking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Asset")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("ParkingCategoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParkingCategoryId");

                    b.ToTable("Parkings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Asset = true,
                            IsDeleted = false,
                            Location = "Centro",
                            Name = "Parqueadero Central",
                            ParkingCategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            Asset = true,
                            IsDeleted = false,
                            Location = "Norte",
                            Name = "Parqueadero Norte",
                            ParkingCategoryId = 2
                        });
                });

            modelBuilder.Entity("Entity.Models.Parameter.ParkingCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Asset")
                        .HasColumnType("boolean");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("ParkingCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Asset = true,
                            Code = "GEN",
                            Description = "Categoría general",
                            IsDeleted = false,
                            Name = "General"
                        },
                        new
                        {
                            Id = 2,
                            Asset = true,
                            Code = "VIP",
                            Description = "Categoría exclusiva",
                            IsDeleted = false,
                            Name = "VIP"
                        });
                });

            modelBuilder.Entity("Entity.Models.Parameter.Rates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<bool>("Asset")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("EndHour")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("ParkingId")
                        .HasColumnType("integer");

                    b.Property<int>("RatesTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StarHour")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TypeVehicleId")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParkingId");

                    b.HasIndex("RatesTypeId");

                    b.HasIndex("TypeVehicleId");

                    b.ToTable("Rates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 2.5m,
                            Asset = true,
                            EndHour = new DateTime(2025, 1, 1, 20, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "Tarifa Día",
                            ParkingId = 1,
                            RatesTypeId = 1,
                            StarHour = new DateTime(2025, 1, 1, 8, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Hora",
                            TypeVehicleId = 1,
                            Year = 2025
                        },
                        new
                        {
                            Id = 2,
                            Amount = 1.5m,
                            Asset = true,
                            EndHour = new DateTime(2025, 1, 2, 6, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "Tarifa Noche",
                            ParkingId = 1,
                            RatesTypeId = 1,
                            StarHour = new DateTime(2025, 1, 1, 20, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Hora",
                            TypeVehicleId = 2,
                            Year = 2025
                        },
                        new
                        {
                            Id = 3,
                            Amount = 5m,
                            Asset = true,
                            EndHour = new DateTime(2025, 1, 1, 20, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "Tarifa VIP",
                            ParkingId = 2,
                            RatesTypeId = 1,
                            StarHour = new DateTime(2025, 1, 1, 8, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Hora",
                            TypeVehicleId = 1,
                            Year = 2025
                        });
                });

            modelBuilder.Entity("Entity.Models.Parameter.RatesType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Asset")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("RatesTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Asset = true,
                            Description = "Tarifa por hora",
                            IsDeleted = false,
                            Name = "Hora"
                        });
                });

            modelBuilder.Entity("Entity.Models.Parameter.Sectors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Asset")
                        .HasColumnType("boolean");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("TypeVehicleId")
                        .HasColumnType("integer");

                    b.Property<int>("ZonesId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TypeVehicleId");

                    b.HasIndex("ZonesId");

                    b.ToTable("Sectors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Asset = true,
                            Capacity = 10,
                            IsDeleted = false,
                            Name = "Sector 1",
                            TypeVehicleId = 1,
                            ZonesId = 1
                        },
                        new
                        {
                            Id = 2,
                            Asset = true,
                            Capacity = 5,
                            IsDeleted = false,
                            Name = "Sector 2",
                            TypeVehicleId = 2,
                            ZonesId = 2
                        },
                        new
                        {
                            Id = 3,
                            Asset = true,
                            Capacity = 3,
                            IsDeleted = false,
                            Name = "Sector VIP",
                            TypeVehicleId = 1,
                            ZonesId = 3
                        });
                });

            modelBuilder.Entity("Entity.Models.Parameter.Slots", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Asset")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("SectorsId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SectorsId");

                    b.ToTable("Slots");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Asset = true,
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "A1",
                            SectorsId = 1
                        },
                        new
                        {
                            Id = 2,
                            Asset = true,
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "A2",
                            SectorsId = 1
                        },
                        new
                        {
                            Id = 3,
                            Asset = true,
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "B1",
                            SectorsId = 2
                        },
                        new
                        {
                            Id = 4,
                            Asset = true,
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "VIP1",
                            SectorsId = 3
                        });
                });

            modelBuilder.Entity("Entity.Models.Parameter.TypeVehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Asset")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("TypeVehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Asset = true,
                            IsDeleted = false,
                            Name = "Auto"
                        },
                        new
                        {
                            Id = 2,
                            Asset = true,
                            IsDeleted = false,
                            Name = "Moto"
                        },
                        new
                        {
                            Id = 3,
                            Asset = true,
                            IsDeleted = false,
                            Name = "Camión"
                        });
                });

            modelBuilder.Entity("Entity.Models.Parameter.Zones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Asset")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("ParkingId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParkingId");

                    b.ToTable("Zones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Asset = true,
                            IsDeleted = false,
                            Name = "Zona A",
                            ParkingId = 1
                        },
                        new
                        {
                            Id = 2,
                            Asset = true,
                            IsDeleted = false,
                            Name = "Zona B",
                            ParkingId = 1
                        },
                        new
                        {
                            Id = 3,
                            Asset = true,
                            IsDeleted = false,
                            Name = "Zona VIP",
                            ParkingId = 2
                        });
                });

            modelBuilder.Entity("Entity.Models.Security.Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Asset")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Forms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Asset = true,
                            Description = "Formulario principal",
                            IsDeleted = false,
                            Name = "Principal"
                        });
                });

            modelBuilder.Entity("Entity.Models.Security.FormModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Asset")
                        .HasColumnType("boolean");

                    b.Property<int>("FormId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModuleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("ModuleId");

                    b.ToTable("FormModule");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Asset = true,
                            FormId = 1,
                            IsDeleted = false,
                            ModuleId = 1
                        });
                });

            modelBuilder.Entity("Entity.Models.Security.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Asset")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Asset = true,
                            Description = "Módulo de gestión",
                            IsDeleted = false,
                            Name = "Gestión"
                        });
                });

            modelBuilder.Entity("Entity.Models.Security.PasswordReset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Used")
                        .HasColumnType("boolean");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("PasswordResets");
                });

            modelBuilder.Entity("Entity.Models.Security.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Asset")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Asset = true,
                            Description = "Permiso para ver",
                            IsDeleted = false,
                            Name = "Ver"
                        },
                        new
                        {
                            Id = 2,
                            Asset = true,
                            Description = "Permiso para editar",
                            IsDeleted = false,
                            Name = "Editar"
                        },
                        new
                        {
                            Id = 3,
                            Asset = true,
                            Description = "Permiso para eliminar",
                            IsDeleted = false,
                            Name = "Eliminar"
                        });
                });

            modelBuilder.Entity("Entity.Models.Security.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<bool>("Asset")
                        .HasColumnType("boolean");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Persons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 30,
                            Asset = true,
                            Document = "0001",
                            Email = "admin@gmail.com",
                            FirstName = "Admin",
                            IsDeleted = false,
                            LastName = "Principal",
                            Phone = "111111111"
                        },
                        new
                        {
                            Id = 2,
                            Age = 25,
                            Asset = true,
                            Document = "0002",
                            Email = "usuario@gmail.com",
                            FirstName = "Usuario",
                            IsDeleted = false,
                            LastName = "Demo",
                            Phone = "222222222"
                        },
                        new
                        {
                            Id = 3,
                            Age = 18,
                            Asset = true,
                            Document = "222222222222",
                            Email = "consumidorFinal@gmail.com",
                            FirstName = "Consumidor",
                            IsDeleted = false,
                            LastName = "Final",
                            Phone = "222222222222"
                        });
                });

            modelBuilder.Entity("Entity.Models.Security.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Asset")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Rol");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Asset = true,
                            Description = "Rol de administrador",
                            IsDeleted = false,
                            Name = "Administrador"
                        },
                        new
                        {
                            Id = 2,
                            Asset = true,
                            Description = "Rol de usuario estándar",
                            IsDeleted = false,
                            Name = "Usuario"
                        });
                });

            modelBuilder.Entity("Entity.Models.Security.RolFormPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Asset")
                        .HasColumnType("boolean");

                    b.Property<int>("FormId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.Property<int>("RolId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RolId");

                    b.ToTable("RolFormPermission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Asset = true,
                            FormId = 1,
                            IsDeleted = false,
                            PermissionId = 1,
                            RolId = 1
                        },
                        new
                        {
                            Id = 2,
                            Asset = true,
                            FormId = 1,
                            IsDeleted = false,
                            PermissionId = 2,
                            RolId = 1
                        },
                        new
                        {
                            Id = 3,
                            Asset = true,
                            FormId = 1,
                            IsDeleted = false,
                            PermissionId = 1,
                            RolId = 2
                        });
                });

            modelBuilder.Entity("Entity.Models.Security.RolParkingUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Asset")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ParkingId")
                        .HasColumnType("integer");

                    b.Property<int>("RolId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParkingId");

                    b.HasIndex("RolId");

                    b.HasIndex("UserId");

                    b.ToTable("RolParkingUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Asset = true,
                            IsDeleted = false,
                            ParkingId = 1,
                            RolId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Asset = true,
                            IsDeleted = false,
                            ParkingId = 2,
                            RolId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Asset = true,
                            IsDeleted = false,
                            ParkingId = 2,
                            RolId = 2,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Entity.Models.Security.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Asset")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Asset = true,
                            Email = "admin@mail.com",
                            IsDeleted = false,
                            Password = "$2a$12$C3DSGP6PRwi3a4hsLdnrs.kYnRkJ0PgR3ky/AbI5Dmem7U3e/lSpq",
                            PersonId = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Asset = true,
                            Email = "usuario@mail.com",
                            IsDeleted = false,
                            Password = "$2a$12$bvkOemZZo7d029/kwq5Duudeamk/pxdPn464EZOT6Ndbg6z06h.Gm",
                            PersonId = 2,
                            Username = "usuario"
                        },
                        new
                        {
                            Id = 3,
                            Asset = true,
                            Email = "usuario@mail.com",
                            IsDeleted = false,
                            Password = "$2a$12$bvkOemZZo7d029/kwq5Duudeamk/pxdPn464EZOT6Ndbg6z06h.Gm",
                            PersonId = 3,
                            Username = "Consumidor Final"
                        });
                });

            modelBuilder.Entity("Entity.Models.Operational.BlackList", b =>
                {
                    b.HasOne("Entity.Models.Operational.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Entity.Models.Operational.Notification", b =>
                {
                    b.HasOne("Entity.Models.Parameter.Parking", "Parking")
                        .WithMany("Notifications")
                        .HasForeignKey("ParkingId");

                    b.Navigation("Parking");
                });

            modelBuilder.Entity("Entity.Models.Operational.RegisteredVehicles", b =>
                {
                    b.HasOne("Entity.Models.Parameter.Slots", "Slots")
                        .WithMany("RegisteredVehicles")
                        .HasForeignKey("SlotsId");

                    b.HasOne("Entity.Models.Operational.Vehicle", "Vehicle")
                        .WithMany("RegisteredVehicles")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slots");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Entity.Models.Operational.Vehicle", b =>
                {
                    b.HasOne("Entity.Models.Parameter.Client", "Client")
                        .WithMany("Vehicles")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Parameter.TypeVehicle", "TypeVehicle")
                        .WithMany("Vehicles")
                        .HasForeignKey("TypeVehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("TypeVehicle");
                });

            modelBuilder.Entity("Entity.Models.Parameter.Camera", b =>
                {
                    b.HasOne("Entity.Models.Parameter.Parking", "Parking")
                        .WithMany("Camaras")
                        .HasForeignKey("ParkingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parking");
                });

            modelBuilder.Entity("Entity.Models.Parameter.Client", b =>
                {
                    b.HasOne("Entity.Models.Security.Person", "Person")
                        .WithOne("Client")
                        .HasForeignKey("Entity.Models.Parameter.Client", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Entity.Models.Parameter.Memberships", b =>
                {
                    b.HasOne("Entity.Models.Parameter.MemberShipType", "MembershipType")
                        .WithMany("Memberships")
                        .HasForeignKey("MembershipTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Operational.Vehicle", "Vehicle")
                        .WithMany("Memberships")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MembershipType");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Entity.Models.Parameter.Parking", b =>
                {
                    b.HasOne("Entity.Models.Parameter.ParkingCategory", "ParkingCategory")
                        .WithMany("Parkings")
                        .HasForeignKey("ParkingCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParkingCategory");
                });

            modelBuilder.Entity("Entity.Models.Parameter.Rates", b =>
                {
                    b.HasOne("Entity.Models.Parameter.Parking", "Parking")
                        .WithMany("Rates")
                        .HasForeignKey("ParkingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Parameter.RatesType", "RatesType")
                        .WithMany("Rates")
                        .HasForeignKey("RatesTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Parameter.TypeVehicle", "TypeVehicle")
                        .WithMany("Rates")
                        .HasForeignKey("TypeVehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parking");

                    b.Navigation("RatesType");

                    b.Navigation("TypeVehicle");
                });

            modelBuilder.Entity("Entity.Models.Parameter.Sectors", b =>
                {
                    b.HasOne("Entity.Models.Parameter.TypeVehicle", "TypeVehicle")
                        .WithMany("Sectors")
                        .HasForeignKey("TypeVehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Parameter.Zones", "Zones")
                        .WithMany("Sectors")
                        .HasForeignKey("ZonesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeVehicle");

                    b.Navigation("Zones");
                });

            modelBuilder.Entity("Entity.Models.Parameter.Slots", b =>
                {
                    b.HasOne("Entity.Models.Parameter.Sectors", "Sectors")
                        .WithMany("Slots")
                        .HasForeignKey("SectorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sectors");
                });

            modelBuilder.Entity("Entity.Models.Parameter.Zones", b =>
                {
                    b.HasOne("Entity.Models.Parameter.Parking", "Parking")
                        .WithMany("Zones")
                        .HasForeignKey("ParkingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parking");
                });

            modelBuilder.Entity("Entity.Models.Security.FormModule", b =>
                {
                    b.HasOne("Entity.Models.Security.Form", "Form")
                        .WithMany("FormModules")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Security.Module", "Module")
                        .WithMany("FormModules")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Entity.Models.Security.PasswordReset", b =>
                {
                    b.HasOne("Entity.Models.Security.User", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Entity.Models.Security.RolFormPermission", b =>
                {
                    b.HasOne("Entity.Models.Security.Form", "Form")
                        .WithMany("RolFormPermission")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Security.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Security.Rol", "Rol")
                        .WithMany("RolFormPermission")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Form");

                    b.Navigation("Permission");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Entity.Models.Security.RolParkingUser", b =>
                {
                    b.HasOne("Entity.Models.Parameter.Parking", "Parking")
                        .WithMany("RolParkingUsers")
                        .HasForeignKey("ParkingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Security.Rol", "Rol")
                        .WithMany()
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Models.Security.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parking");

                    b.Navigation("Rol");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Models.Security.User", b =>
                {
                    b.HasOne("Entity.Models.Security.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Entity.Models.Operational.Vehicle", b =>
                {
                    b.Navigation("Memberships");

                    b.Navigation("RegisteredVehicles");
                });

            modelBuilder.Entity("Entity.Models.Parameter.Client", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Entity.Models.Parameter.MemberShipType", b =>
                {
                    b.Navigation("Memberships");
                });

            modelBuilder.Entity("Entity.Models.Parameter.Parking", b =>
                {
                    b.Navigation("Camaras");

                    b.Navigation("Notifications");

                    b.Navigation("Rates");

                    b.Navigation("RolParkingUsers");

                    b.Navigation("Zones");
                });

            modelBuilder.Entity("Entity.Models.Parameter.ParkingCategory", b =>
                {
                    b.Navigation("Parkings");
                });

            modelBuilder.Entity("Entity.Models.Parameter.RatesType", b =>
                {
                    b.Navigation("Rates");
                });

            modelBuilder.Entity("Entity.Models.Parameter.Sectors", b =>
                {
                    b.Navigation("Slots");
                });

            modelBuilder.Entity("Entity.Models.Parameter.Slots", b =>
                {
                    b.Navigation("RegisteredVehicles");
                });

            modelBuilder.Entity("Entity.Models.Parameter.TypeVehicle", b =>
                {
                    b.Navigation("Rates");

                    b.Navigation("Sectors");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Entity.Models.Parameter.Zones", b =>
                {
                    b.Navigation("Sectors");
                });

            modelBuilder.Entity("Entity.Models.Security.Form", b =>
                {
                    b.Navigation("FormModules");

                    b.Navigation("RolFormPermission");
                });

            modelBuilder.Entity("Entity.Models.Security.Module", b =>
                {
                    b.Navigation("FormModules");
                });

            modelBuilder.Entity("Entity.Models.Security.Person", b =>
                {
                    b.Navigation("Client")
                        .IsRequired();
                });

            modelBuilder.Entity("Entity.Models.Security.Rol", b =>
                {
                    b.Navigation("RolFormPermission");
                });
#pragma warning restore 612, 618
        }
    }
}
